File being reviewed: Door.cs
Author of file: Stephen Hogg
Date: 3/6/2020
Focus: Maintainability
Time to review: 10 minutes

As a whole the class looks okay, up until the enterdoor() method I'd say. The use of booleans to see if a door is a destroyable one or not
and then using sprite name to unlock a door or rather to change the lock / unlock state is nice, though I have concerns regarding the 
enterdoor() and placelink() methods as far as maintanability goes.

Both of these classes seem to possess action / control that would be better suited to other classes and my concern is that keeping so much
functionality inside this one class will hinder future maintainence of the code. With EnterDoor() just the name alone makes me think this
method would be better suited to the collision handler class or room class. The method itself can unlock a door and load link into the next
room he wants to enter using the placelink() and unlockdoor() as helper methods, though placelink() is private and unlockdoor() is public. 
So this causes me to be confuses, because to me if unlock door is public then that implies to me that another class will handle unlocking 
doors, so probably the collision handler class or room class. But then this public method is used in the enterdoor() method which seems
like the enterdoor() method is actually the one that will handle entering / access to doors, but again that functionality seems like something
the collison handler class or room class should be responsible for. 

The placelink() method gives me similar concerns as the unlockdoor() method, though since this is a private class it pushes my train of 
thought/ use of this class more towards a door handler class, but then this goes back to my previously stated conflict of thought with 
unlockdoor() being a publci method. 

Overall I think for the most part the class is good, it's just trying to take on too much functionality that should be in other door classes
or in collision handler classes or something along those lines. 
